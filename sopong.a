	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment

        seg.u Variables
	org $80

BallX		.byte
BallY		.byte
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment

	seg Code
        org $f000

Start
	CLEAN_START
	lda #$0a
	sta COLUPF
        lda #%00100001
        sta CTRLPF
        lda #66
        sta BallX
        lda #49
        sta BallY

NextFrame
        lsr SWCHB	; test Game Reset switch
        bcc Start	; reset?
; 1 + 3 lines of VSYNC
	VERTICAL_SYNC
; 37 lines of underscan
	TIMER_SETUP 37
        lda #$ff
        sta PF2
        sta PF1
        sta PF0
	lda BallX	; get X coordinate
        ldx #4		; player 0
        jsr SetHorizPos	; set coarse offset
        sta WSYNC	; sync w/ scanline
        sta HMOVE	; apply fine offsets     
        TIMER_WAIT
       
        ldx #0
	stx VBLANK

	SKIP_SCANLINES 8
        
        stx PF0
        stx PF1
        stx PF2

        ; 192 lines of frame
	ldx #176	; X = 192 scanlines
LVScan

        ldy #2
	txa		; X -> A
        sec		; set carry for subtract
        sbc BallY	; local coordinate
        cmp #8          ; in sprite?
        bcc InSprite	; yes, skip over next
        ldy #0		; not in sprite, load 0
InSprite
	sty ENABL
        sta WSYNC
	txa
        and #4
        beq l2
        lda #128
l2        
	sta PF2               
	  
pfskip
	dex		; decrement X
        bne LVScan	; repeat until 192 lines

	lda #$ff
        sta PF0
        sta PF1
        sta PF2

	SKIP_SCANLINES 8


; 29 lines of overscan
        lda #2
        sta VBLANK
	TIMER_SETUP 29
        TIMER_WAIT
; total = 262 lines, go to next frame
        jmp NextFrame


; SetHorizPos routine
; A = X coordinate
; X = player number (0 or 1)
SetHorizPos
	sta WSYNC	; start a new line
	sec		; set carry flag
DivideLoop
	sbc #15		; subtract 15
	bcs DivideLoop	; branch until negative
	eor #7		; calculate fine offset
	asl
	asl
	asl
	asl
	sta RESP0,x	; fix coarse position
	sta HMP0,x	; set fine offset
	rts		; return to caller

        

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue

	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector
