	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment

        seg.u Variables
	org $80

ballX		.byte
ballY		.byte
ballDx		.byte
ballDy		.byte
p1y		.byte
p2y		.byte
sball		.byte
sp1		.byte
sp2		.byte
pl1p		.word
pl2p		.word
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment

	seg Code
        org $f000

Start
	CLEAN_START
	lda #$0a
	sta COLUPF
        sta COLUP0
        sta COLUP1
        lda #%00100001
        sta CTRLPF
        lda #%00100000
        sta NUSIZ0
        sta NUSIZ1
        lda #90
        sta ballX
        sta ballY
	lda #80
        sta p1y
        sta p2y
	lda #1
        sta ballDx
        lda #-1
        sta ballDy

NextFrame
        lsr SWCHB	; test Game Reset switch
        bcc Start	; reset?
; 1 + 3 lines of VSYNC
	VERTICAL_SYNC
; 37 lines of underscan
	TIMER_SETUP 37
        lda #$ff
        sta PF2
        sta PF1
        sta PF0
    	
        lda ballX	
        ldx #4		
        jsr SetHorizPos	
        
        lda #20
        ldx #2		
        jsr SetHorizPos	

        lda #168
        ldx #3		
        jsr SetHorizPos	

	sta WSYNC	
        sta HMOVE	
        
        TIMER_WAIT
        	
        ldx #0
	stx VBLANK

	SKIP_SCANLINES 7
        
        stx PF0
        stx PF1
        stx PF2
        
        
        lda #<.pldata
        sta pl1p
        lda #>.pldata
        sta pl1p+1

        clc
	lda pl1p
        adc p1y
	sta pl1p
        bcc carry1
        inc pl1p+1
carry1        
        
        ; 192 lines of frame
	ldx #176	; X = 192 scanlines
        
LVScan
	stx sp1
	ldy #1
        sty sball
        iny
        
	txa
        sec		
        sbc ballY	
        cmp #8         
        bcs InSprite	
        sty sball	
InSprite
    	
	;txa		
        ;sec		
        ;sbc p2y	
        ;cmp #32         
        ;bcs InPl2	
        ;sty sp2	
InPl2 
	lda (pl1p),x
        sta sp1		
        
 	lda sball
        ldy sp1
 	sta WSYNC

        sta ENABL
        sty ENAM0
;        sta ENAM1

	txa
        and #4
        beq l2
        lda #128
l2        
	sta PF2               
	  
pfskip
        
        dex		
        bne LVScan	
	sta WSYNC
        
	lda #$ff
        sta PF0
        sta PF1
        sta PF2

	SKIP_SCANLINES 7


; 29 lines of overscan
        lda #2
        sta VBLANK
	TIMER_SETUP 29

	lda ballX
        clc 
        adc ballDx
        sta ballX
        cmp #16
        beq bounceBallX
        cmp #172
        beq bounceBallX
        bne skipBounceX
bounceBallX        
        lda ballDx
        eor #$ff
        clc
        adc #1
        sta ballDx

skipBounceX

	lda ballY
        clc 
        adc ballDy
        sta ballY
        cmp #3
        beq bounceBallY
        cmp #170
        beq bounceBallY
        bne skipBounce
bounceBallY        
        lda ballDy
        eor #$ff
        clc
        adc #1
        sta ballDy

        
skipBounce        
        TIMER_WAIT
; total = 262 lines, go to next frame
        jmp NextFrame


; SetHorizPos routine
; A = X coordinate
; X = player number (0 or 1)
SetHorizPos
	sta WSYNC	; start a new line
	sec		; set carry flag
DivideLoop
	sbc #15		; subtract 15
	bcs DivideLoop	; branch until negative
	eor #7		; calculate fine offset
	asl
	asl
	asl
	sta RESP0,x	; fix coarse position
	asl
	sta HMP0,x	; set fine offset
	rts		; return to caller

.pldata	        

        hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
        
        hex 0202020202020202
	hex 0202020202020202
	hex 0202020202020202
	hex 0202020202020202
	

        hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
                                

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue

	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector
