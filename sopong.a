	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment

        seg.u Variables
	org $80

ballX		.byte ; ball position
ballY		.byte
ballDx		.byte ; ball movement deltas
ballDy		.byte
ballSx		.byte ; ball horizontal speed
ballSy		.byte ; ball vertical speed
ballDirX	.byte ; ball horizontal direction  0 left / 1 right
ballDirY	.byte ; ball vertical direction
p1y		.byte ; paddles vert pos
p2y		.byte
sball		.byte ; ball shadow register
sp1		.byte ; paddle shadow registers
sp2		.byte 
pl1p		.word ; pointers to player graphics data tables
pl2p		.word
score0		.byte ; scores
score1		.byte
random		.byte ; pseudo random value tossed every frame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Consts

RAND_EOR_8 = $A9


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment

	seg Code
        org $f000

Start
	CLEAN_START

; initialize variables        
	lda #$0a
	sta COLUPF
        sta COLUP0
        sta COLUP1
        lda #%00100001
        sta CTRLPF
        lda #%00100000
        sta NUSIZ0
        sta NUSIZ1
        lda #90
        sta ballX
        sta ballY
	lda #72
        sta p1y
        sta p2y
        sta ballDx
        sta ballDy
        sta ballDirX
        sta ballDirY
	lda #20
        sta ballSx
	lda #20
        sta ballSy
        
; start of frame

NextFrame
        lsr SWCHB	; test Game Reset switch
        bcc Start	; reset?
; 1 + 3 lines of VSYNC
	VERTICAL_SYNC
; 37 lines of underscan
	TIMER_SETUP 37
        
; set playfield top line
        
        lda #$ff
        sta PF2
        sta PF1
        sta PF0
        sta CXCLR

; set ball and players positions

        lda ballX	
        ldx #4		; ball
        jsr SetHorizPos	
        
        lda #20
        ldx #2		; missile 0
        jsr SetHorizPos	

        lda #168
        ldx #3		; missile 1
        jsr SetHorizPos	

; check player 1 joy

	ldx p1y
	lda #%00010000	; Up?
	bit SWCHA
	bne SkipMoveUp1
        cpx #0		; check limit
        beq SkipMoveUp1
        dex
        dex
SkipMoveUp1
	lda #%00100000	; Down?
	bit SWCHA 
	bne SkipMoveDown1
        cpx #142	; check limit
        bcs SkipMoveDown1
        inx
        inx
SkipMoveDown1
	stx p1y

; check player 2 joy

	ldx p2y
	lda #%00000001	; Up?
	bit SWCHA
	bne SkipMoveUp2
        cpx #0		; check limit
        beq SkipMoveUp2
        dex
        dex
SkipMoveUp2
	lda #%00000010	; Down?
	bit SWCHA 
	bne SkipMoveDown2
        cpx #142	; check limit
        bcs SkipMoveDown2
        inx
        inx
SkipMoveDown2
	stx p2y        

; calculate player1 top offset pointer
        
        lda #>.pldata
        sta pl1p + 1
        clc
	lda #<.pldata
        adc p1y
	sta pl1p
        bcc carry1
        inc pl1p + 1
carry1        

; calculate player2 top offset pointer

	lda #>.pldata
        sta pl2p + 1
        clc
	lda #<.pldata
        adc p2y
	sta pl2p
        bcc carry2
        inc pl2p + 1
carry2        

; randomize 
        
	jsr rand
	
; and set sprites position        
        
	sta WSYNC	
        sta HMOVE	
        
        TIMER_WAIT
        	
        ldx #0
	stx VBLANK

	SKIP_SCANLINES 7
        
; clear playfield registers

	stx PF0
        stx PF1
        stx PF2
        
; 176 lines of playfield -------------- LOOP START

	ldy #176	
        
LVScan
	
; draw ball if needed        
        ldx #1
	tya
        sec		
        sbc ballY	
        cmp #8         
        bcs InSprite	
	inx	
InSprite
        stx sball	
    	
; draw paddle using bytes offsets
	
	lda (pl2p),y
        sta sp2
	lda (pl1p),y
        sta sp1		

; fill sprite registers
	ldx sball
 	sta WSYNC
        stx ENABL
        sta ENAM0
	lda sp2       
	sta ENAM1

; draw playfield v-line 
	tya
        and #4
        beq skipFill
        lda #128
skipFill        
	sta PF2               
       
        dey		
        bne LVScan	
        
; 176 lines of playfield -------------- LOOP END        
        
; draw bottom line       
        
	lda #$ff
	sta WSYNC
        sta PF0
        sta PF1
        sta PF2

	SKIP_SCANLINES 7

; 29 lines of overscan

	lda #2
        sta VBLANK
	TIMER_SETUP 29


; count horizontal ball movement

        clc
	lda ballDx
        adc ballSx
        tax 
        and #15
        sta ballDx
        txa
        lsr
        lsr
        lsr
        lsr
        tax
        lda ballDirX
        beq singSkip 
        txa
	jsr signChange
        tax
        
singSkip        
        clc 
        txa
        adc ballX
        sta ballX
        
; check if ball leaves screen        

	sec
        sbc #18
        bcs skipOutLeft
        lda #0
        jmp playerAFails
skipOutLeft        
        lda #172
        clc
        sbc ballX
        bcs SkipOutRight
        lda #1
        jmp playerAFails
SkipOutRight

; count vertical ball movement

	clc
	lda ballDy
        adc ballSy
        tax 
        and #15
        sta ballDy
        txa
        lsr
        lsr
        lsr
        lsr
        tax
        lda ballDirY
        beq singSkip2 
        txa
	jsr signChange
        tax
singSkip2        
	clc 
        txa
        adc ballY
        sta ballY

; check if ball bounces

	sec
        sbc #3
        bcs skipBounceTop
        lda #0
        sta ballDirY
skipBounceTop        
        lda #171
        clc
        sbc ballY
        bcs SkipBounceBottom
        lda #1
        sta ballDirY
SkipBounceBottom

; check collision of ball and player Left

	lda #%01000000	
	and CXM0FB
	beq notColiddedL
	lda #0
        sta ballDirX

notColiddedL

; check collision of ball and player Right

	lda #%01000000	
	and CXM1FB
	beq notColiddedR
	lda #1
        sta ballDirX
notColiddedR

	jmp EndOfFrame

; someone failed 
playerAFails
	eor #1
        sta ballDirX
        beq p1fails
;p0 fails        
	ldx #160
        lda p2y
   	inc score1   
	bcc skipp1        
	   
p1fails
;p1
	ldx #28
	lda p1y
	inc score0

skipp1
; restart ball position (winner Y pos in accu)
	jsr signChange
        adc #156
        sta ballY
        stx ballX
        lda random
        and #15
        sta ballSy
	lda random 
        rol
        rol
        and #1
        sta ballDirY

EndOfFrame

	TIMER_WAIT
; total = 262 lines, go to next frame
        jmp NextFrame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SUBROUTINES

signChange
        eor #$ff
        clc
        adc #1
	rts	

; SetHorizPos routine
; A = X coordinate
; X = player number (0 or 1)
SetHorizPos
	sta WSYNC	; start a new line
	sec		; set carry flag
DivideLoop
	sbc #15		; subtract 15
	bcs DivideLoop	; branch until negative
	eor #7		; calculate fine offset
	asl
	asl
	asl
	sta RESP0,x	; fix coarse position
	asl
	sta HMP0,x	; set fine offset
	rts		; return to caller


rand    lda random
	beq xseed
	lsr
        bcc srand
xseed   
	eor #RAND_EOR_8
srand
	sta random
	rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DATA

.pldata	        

        hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 000000000000000000
	
        hex 0202020202020202
	hex 0202020202020202
	hex 0202020202020202
	hex 0202020202020202
	
        hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 000000000000000000
                                

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue

	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector
