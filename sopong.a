	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment

        seg.u Variables
	org $80

ballX		.byte
ballY		.byte
ballDx		.byte
ballDy		.byte
ballSx		.byte
ballSy		.byte
ballDirX	.byte
ballDirY	.byte
p1y		.byte
p2y		.byte
sball		.byte
sp1		.byte
sp2		.byte
pl1p		.word
pl2p		.word
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment

	seg Code
        org $f000

Start
	CLEAN_START
	lda #$0a
	sta COLUPF
        sta COLUP0
        sta COLUP1
        lda #%00100001
        sta CTRLPF
        lda #%00100000
        sta NUSIZ0
        sta NUSIZ1
        lda #90
        sta ballX
        sta ballY
	lda #142
        sta p1y
        lda #0
        sta p2y
        sta ballDx
        sta ballDy
        sta ballDirX
        sta ballDirY
	lda #10
        sta ballSx
	lda #20
        sta ballSy

NextFrame
        lsr SWCHB	; test Game Reset switch
        bcc Start	; reset?
; 1 + 3 lines of VSYNC
	VERTICAL_SYNC
; 37 lines of underscan
	TIMER_SETUP 37
        lda #$ff
        sta PF2
        sta PF1
        sta PF0
    	
        lda ballX	
        ldx #4		
        jsr SetHorizPos	
        
        lda #20
        ldx #2		
        jsr SetHorizPos	

        lda #168
        ldx #3		
        jsr SetHorizPos	

	sta WSYNC	
        sta HMOVE	
        
        TIMER_WAIT
        	
        ldx #0
	stx VBLANK

	SKIP_SCANLINES 7
        
        stx PF0
        stx PF1
        stx PF2
        
        lda #>.pldata
        sta pl1p + 1
        clc
	lda #<.pldata
        adc p1y
	sta pl1p
        bcc carry1
        inc pl1p + 1
carry1        

        lda #>.pldata
        sta pl2p + 1
        clc
	lda #<.pldata
        adc p2y
	sta pl2p
        bcc carry2
        inc pl2p + 1
carry2        

        
        ; 192 lines of frame
	ldy #176	; X = 192 scanlines
        
LVScan
	ldx #1
	tya
        sec		
        sbc ballY	
        cmp #8         
        bcs InSprite	
	inx	
InSprite
        stx sball	
    	
	lda (pl2p),y
        sta sp2
	lda (pl1p),y
        sta sp1		

 	lda sball
        ldx sp1
 	sta WSYNC

        sta ENABL
        stx ENAM0
	lda sp2       
	sta ENAM1

	tya
        and #4
        beq l2
        lda #128
l2        
	sta PF2               
	  
pfskip
        
        dey		
        bne LVScan	
	sta WSYNC
        
	lda #$ff
        sta PF0
        sta PF1
        sta PF2

	SKIP_SCANLINES 7


; 29 lines of overscan
        lda #2
        sta VBLANK
	TIMER_SETUP 29

;; ball movement

        clc
	lda ballDx
        adc ballSx
        tax 
        and #15
        sta ballDx
        txa
        lsr
        lsr
        lsr
        lsr
        tax
        lda ballDirX
        beq singSkip 
        txa
	jsr signChange
        tax
        
singSkip        
        clc 
        txa
        adc ballX
        sta ballX
        sec
        sbc #18
        bcs skipBounceLeft
        lda #0
        sta ballDirX
skipBounceLeft        
        lda #170
        clc
        sbc ballX
        bcs SkipBounceRight
        lda #1
        sta ballDirX
SkipBounceRight

        clc
	lda ballDy
        adc ballSy
        tax 
        and #15
        sta ballDy
        txa
        lsr
        lsr
        lsr
        lsr
        tax
        lda ballDirY
        beq singSkip2 
        txa
	jsr signChange
        tax
        
singSkip2        
        clc 
        txa
        adc ballY
        sta ballY
        sec
        sbc #3
        bcs skipBounceTop
        lda #0
        sta ballDirY
skipBounceTop        
        lda #171
        clc
        sbc ballY
        bcs SkipBounceBottom
        lda #1
        sta ballDirY
SkipBounceBottom

                

skipBounce        
        TIMER_WAIT
; total = 262 lines, go to next frame
        jmp NextFrame

signChange
        eor #$ff
        clc
        adc #1
	rts	


; SetHorizPos routine
; A = X coordinate
; X = player number (0 or 1)
SetHorizPos
	sta WSYNC	; start a new line
	sec		; set carry flag
DivideLoop
	sbc #15		; subtract 15
	bcs DivideLoop	; branch until negative
	eor #7		; calculate fine offset
	asl
	asl
	asl
	sta RESP0,x	; fix coarse position
	asl
	sta HMP0,x	; set fine offset
	rts		; return to caller

.pldata	        

        hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 000000000000000000
	
        hex 0202020202020202
	hex 0202020202020202
	hex 0202020202020202
	hex 0202020202020202
	
        hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 0000000000000000
	hex 000000000000000000

                                

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue

	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector
